#!/usr/bin/env node


exports.app = require('../app');
var https = require('https'),
http = require('http'), fs = require('fs');

/**
 * Get port from environment and store in Express.
 */
var httpsPort = normalizePort('6001');
exports.app.set('port', httpsPort);


process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0"; // Avoids DEPTH_ZERO_SELF_SIGNED_CERT error for self-signed certs

/**
 * Create HTTPS server.
 */


if (!process.env.__SERVER_NOLISTEN) {
  exports.server = http.createServer(exports.app).listen(httpsPort, function () {
 console.log('::::http--'+httpsPort);
});
}

// if (!process.env.__SERVER_NOLISTEN) {
//   console.log("server 2----->")
//   exports.server2 = https.createServer({
//     key: fs.readFileSync('/opt/tesla/tls/key.pem')
//     , cert: fs.readFileSync('/opt/tesla/tls/cert.pem')
//     , ca: fs.readFileSync('/opt/tesla/tls/ca.crt')
//     , requestCert: true
//     , rejectUnauthorized: true
//   }, exports.app).listen(httpsPort2);
// }


/**
 * Listen on provided port, on all network interfaces.
 */

exports.server.on('error', onError);
exports.server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = exports.server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  //debug('Listening on ' + bind);
}




